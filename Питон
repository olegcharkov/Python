# 1: Создайте функцию, принимающую на вход имя, возраст и город проживания человека.
def task_1():
    def person(name, age, city):
        print(str(name), ',', int(age), 'лет / год(а)', ',', 'проживает в городе', str(city))
    person('Олег', 20, 'Москва')

# 2: Создайте функцию, принимающую на вход 3 числа и возвращающую наибольшее из них.
def task_2():
    numbers = []
    for i in range(1):
        number = int(input('Введите первое число: '))
        numbers.append(number)
    for i in range(1):
        number = int(input('Введите второе число: '))
        numbers.append(number)
    for i in range(1):
        number = int(input('Введите третье число: '))
        numbers.append(number)
    print('Наибольшее число из введенных трех чисел = ', max(numbers))

# 3: Давайте опишем пару сущностей player и enemy через словарь, который будет иметь ключи и значения:
# name - строка полученная от пользователя,
# health = 100,
# damage = 50.
# ### Поэкспериментируйте с значениями урона и жизней по желанию.
# ### Теперь надо создать функцию attack(person1, person2). Примечание: имена аргументов можете указать свои.
# ### Функция в качестве аргумента будет принимать атакующего и атакуемого.
# ### В теле функция должна получить параметр damage атакующего и отнять это количество от health атакуемого.
# Функция должна сама работать со словарями и изменять их значения
def task_3():
    player = {
        "Your name": str(input('Введите имя игрока: ')),
        "Health": 100,
        "Damage": 50,
        "Armour": 3,
    }
    print('Ваш персонаж:', player)

    enemy = {
        "Enemy name": str('Drogon'),
        "Health": 150,
        "Damage": 80,
        "Armour": 5,
    }
    print('Ваш противник:', enemy)

    def attack(fighter_1, fighter_2):
        battle_health = fighter_1["Health"] - fighter_2["Damage"] / fighter_2["Damage"]
        fighter_1["Health"] = battle_health
        return fighter_1["Health"]
    attack(player, enemy)

    def attack_2(fighter_2, fighter_1):
         battle_health_2 = fighter_2["Health"] - fighter_1["Damage"] / fighter_1["Damage"]
         fighter_2["Health"] = battle_health_2
         return fighter_2["Health"]
    attack_2(player, enemy)

    print('Ващ персонаж после битвы: ', player)
    print('Противник после битвы: ', enemy)


if __name__ == '__main__':
    # task_1()
    # task_2()
     task_3()

# 1
# Создать модуль music_serialize.py. В этом модуле определить словарь для вашей любимой музыкальной группы.
# С помощью модулей json и pickle сериализовать данный словарь в json и в байты, вывести результаты в терминал.
# Записать результаты в файлы group.json, group.pickle соответственно. В файле group.json указать кодировку utf-8.

def task_1():
    import json
    import pickle

    my_favourite_songs = {
        'group': 'Blessed Mane',
        'tracks': ['Lost Orion', 'Youth']
    }
    print(my_favourite_songs)
    print(type(my_favourite_songs))

    j_print = json.dumps(my_favourite_songs)
    print(j_print)
    print(type(j_print))
    with open('print.json', 'w', encoding='utf-8') as f:
        json.dump(j_print, f)

    p_print = pickle.dumps(my_favourite_songs)
    print(p_print)
    print(type(p_print))
    with open('print.pickle', 'wb') as f:
        pickle.dump(my_favourite_songs, f)

    with open('print.pickle', 'rb') as f:
        result = pickle.load(f)
    print(result)
    print(type(result))

# 2
# Создать модуль music_deserialize.py. В этом модуле открыть файлы group.json и group.pickle,
# прочитать из них информацию. И получить объект: словарь из предыдущего задания.
def task_2():
    import json
    import pickle

    with open('print.pickle', 'rb') as f:
        result = pickle.load(f)
    print(result)
    print(type(result))

    with open('print.json', 'r', encoding='utf-8') as f:
        result_2 = json.load(f)
    print(result_2)
    print(type(result_2))


if __name__ == '__main__':
    # task_1()
     task_2()

# 1
# Даны два списка фруктов. Получить список фруктов, присутствующих в обоих исходных списках.

def task_1():
    fruit_list_1 = ['orange', 'banana', 'apple']
    fruit_list_2 = ['peer', 'mango', 'kiwi', 'apple', 'banana']

    fruit_list = [fruit for fruit in fruit_list_2 if fruit in fruit_list_1]
    print(fruit_list)

# 2
# Дан список, заполненный произвольными числами. Получить список из элементов исходного,
# удовлетворяющих следующим условиям:
# Элемент кратен 3,
# Элемент положительный,
# Элемент не кратен 4.

def task_2():
    from random import randint

    random_list = [randint(-100, 100) for number in range(0, 10)]
    task_list = [number for number in random_list if number % 3 == 0 and number > 0 and number % 4 !=0]

    print(random_list)
    print(task_list)

# 3
# Напишите функцию которая принимает на вход список.
# Функция создает из этого списка новый список из квадратных корней чисел (если число положительное)
# и самих чисел (если число отрицательное) и возвращает результат
# (желательно применить генератор и тернарный оператор при необходимости).
# В результате работы функции исходный список не должен измениться.
# Например:
# old_list = [1, -3, 4]
# result = [1, -3, 2]

def task_3():
    from math import sqrt

    list_1 = [-20, -5, 10, 4, 3, -1, 100]

    def list_2(list_1):
        list_2 = [number for number in list_1 if number]
        result = [round(sqrt(number)) if number > 0 else number for number in list_2]
        return result

    print(list_1)
    print(list_2(list_1))

# 4
# Написать функцию которая принимает на вход число от 1 до 100. Если число равно 13,
# функция поднимает исключительную ситуации ValueError иначе возвращает введенное число, возведенное в квадрат.
# Далее написать основной код программы. Пользователь вводит число.
# Введенное число передаем параметром в написанную функцию и печатаем результат, который вернула функция.
# Обработать возможность возникновения исключительной ситуации, которая поднимается внутри функции.

def task_4():
    def case_checker(number):
        if number == 13:
            raise ValueError
        else:
            return number ** 2
    user_answer = int(input('Введите любое число для возведения его в квадрат: '))

    try:
        print('Ваше число =', case_checker(user_answer))
    except ValueError:
        print('Введите любое число, кроме 13!')
        new_answer = int(input('Ваше новое число: '))
        print('Ваше число в квадрате =', new_answer)

if __name__ == '__main__':
    # task_1()
    # task_2()
    # task_3()
     task_4()

import os
import shutil
import datetime

def create_file(name, text=None):
    with open(name, 'w', encoding='utf-8') as f:
        if text:
            f.write(text)

def create_folder(name):
    try:
        os.mkdir(name)
    except FileExistsError:
        print('Такая папка уже существует')

def get_list(folders_only = False):
    result = os.listdir()
    if folders_only:
        result = [f for f in result if os.path.isdir(f)]
    print(result)

def delete_file(name):
    if os.path.isdir(name):
        os.rmdir(name)
    else:
        os.remove(name)

def copy_file(name, new_name):
    if os.path.isdir(name):
        try:
            shutil.copytree(name. new_name)
        except FileExistsError:
            print('Такая папка уже существует')
        else:
            shutil.copy(name, new_name)

def save_info(message):
    current_time = datetime.datetime.now()
    result = f'{current_time} - {message}'
    with open('log.txt', 'a', encoding='utf-8') as f:
        f.write(result + '\n')

if __name__ == '__main__':
    create_file('text.dot')
    create_file('text.dat', 'I love Sanya')
    create_folder('new')
    get_list()
    get_list(True)
    delete_file('new')
    copy_file('HW_7', 'HW_7_d')
    save_info('abc')

import sys
from HW_8 import create_file, create_folder, get_list, delete_file, copy_file, save_info
from HW_4 import task_3

save_info('Начало:')

try:
    command = sys.argv[1]
except IndexError:
    print('Укажите команду: ')
else:
    if command == 'list':
        get_list()
    elif command == 'create_file':
        try:
            name = sys.argv[2]
        except IndexError:
            print('Отсутствует название файла.')
        else:
            create_file(name)
    elif command == 'create_folder':
        try:
            name = sys.argv[2]
        except IndexError:
            print('Отсутствует название папки.')
        else:
            create_folder(name)
    elif command == 'delete':
        try:
            name = sys.argv[2]
        except IndexError:
            print('Отсутствует наименование удаляемого объекта.')
        else:
            delete_file(name)
    elif command == 'copy':
        try:
            name = sys.argv[2]
            new_name = sys.argv[3]
        except IndexError:
            print('Отсутствует название файла.')
        else:
            copy_file(name, new_name)
    elif command == 'help':
        print('list - вывод списка файлов и папок.')
        print('create_file - создание файла.')
        print('create_folder - создание папки.')
        print('delete - удаление папки или файла.')
        print('copy - копирование файла или папки.')
        print('game - игра "Компьютер угадывает число от 1 до 100".')
    elif command == 'game':
        task_3()

save_info('Окончание.')
